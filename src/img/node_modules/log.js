/*
 * CDDL HEADER START
 *
 * The contents of this file are subject to the terms of the
 * Common Development and Distribution License, Version 1.0 only
 * (the "License").  You may not use this file except in compliance
 * with the License.
 *
 * You can obtain a copy of the license at http://smartos.org/CDDL
 *
 * See the License for the specific language governing permissions
 * and limitations under the License.
 *
 * When distributing Covered Code, include this CDDL HEADER in each
 * file.
 *
 * If applicable, add the following below this CDDL HEADER, with the
 * fields enclosed by brackets "[]" replaced with your own identifying
 * information: Portions Copyright [yyyy] [name of copyright owner]
 *
 * CDDL HEADER END
 *
 * Copyright (c) 2012, Joyent, Inc. All rights reserved.
 *
 */

var sprintf = require('/usr/node/node_modules/sprintf').sprintf;

var _stdout = process.stdout;
var _stderr = process.stderr;

var _writer = _stderr;
var _level;

var LEVELS = {
    ERROR: 1,
    WARN:  2,
    INFO:  3,
    DEBUG: 4,
    TRACE: 5
};

var config = {
    format: 'application/json',
    level: LEVELS.INFO,
    writer: function (message) { _stderr.write(message.message); }
};

_level = config.level;
_writer = config.writer;

var outputFormatters = {
    'text/plain': function (level, args) {
        var msg = sprintf.apply(null, args) + '\n';
        var out = level + ' ' + msg;
        return out;
    },
    'application/json': function (level, args) {
        var msg = sprintf.apply(null, args);
        var out = {level: level, message: msg};
        return out;
    }
};

var _format = function (level, args) {
    return outputFormatters[config.format](level, args);
};

module.exports = {
    info: function () {
        if (_level >= LEVELS.INFO)  {
            _writer(_format('INFO', arguments));
        }
    },
    err: function () {
        if (_level >= LEVELS.ERROR)  {
            _writer(_format('ERROR', arguments));
        }
    },
    debug: function () {
        if (_level >= LEVELS.DEBUG) {
            _writer(_format('DEBUG', arguments));
        }
    },
    trace: function () {
        if (_level >= LEVELS.TRACE) {
            _writer(_format('TRACE', arguments));
        }
    },
    level: function (newlevel) {
        var n;

        if (newlevel !== undefined) {
            n = newlevel.toUpperCase();
            if (LEVELS[n] !== undefined) {
                _level = LEVELS[n];
            }
        }
        return _level;
    },
    setWriter: function (writer) {
        if (typeof (writer) === 'function') {
            _writer = writer;
        } else {
            throw new Error('writer must be a function');
        }
    },
    config: config
};
