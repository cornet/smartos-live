/*
 * CDDL HEADER START
 *
 * The contents of this file are subject to the terms of the
 * Common Development and Distribution License, Version 1.0 only
 * (the "License").  You may not use this file except in compliance
 * with the License.
 *
 * You can obtain a copy of the license at http://smartos.org/CDDL
 *
 * See the License for the specific language governing permissions
 * and limitations under the License.
 *
 * When distributing Covered Code, include this CDDL HEADER in each
 * file.
 *
 * If applicable, add the following below this CDDL HEADER, with the
 * fields enclosed by brackets "[]" replaced with your own identifying
 * information: Portions Copyright [yyyy] [name of copyright owner]
 *
 * CDDL HEADER END
 *
 * Copyright (c) 2012, Joyent, Inc. All rights reserved.
 *
 */

var fs = require('fs');
var path = require('path');
var common = require('./common');
var log = common.log;

var DB_PATH = '/var/db/imgadm';
var db = {};

var _isUuid = function (obj) {
    var uuidReg =
        /[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}/;
    if (typeof (obj) === 'string') {
        return (uuidReg.test(obj));
    }
    return false;
};

var validateManifest = function (manifest) {
    var errors = [];
    var i;
    var prop;
    var ramFields;
    var requiredFields = [
        'uuid',
        'name',
        'version',
        'description',
        'published_at',
        'type',
        'os',
        'files',
        'creator_uuid',
        'creator_name',
        'urn'
    ];
    var uuidFields = [
        'uuid',
        'creator_uuid',
        'restricted_to_uuid'
    ];
    var val;
    var validTypes = [
        'zone-dataset',
        'zvol'
    ];
    var vmFields = [
        'nic_driver',
        'disk_driver',
        'image_size'
    ];

    var _isPresent = function (p) {
        return (manifest[p] != undefined);
    };

    var _isPositiveInt = function (p, v) {
        return (typeof (v) != 'number' || v < 0);
    };

    // Required fields
    for (i = 0; i < requiredFields.length; i++) {
        prop = requiredFields[i];
        if (!_isPresent(prop)) {
            errors.push('missing required ' + prop + ' field');
        }
    }

    // UUID fields
    for (i = 0; i < uuidFields.length; i++) {
        prop = uuidFields[i];
        if (requiredFields.indexOf(prop) != -1) {
            if (!_isUuid(manifest[prop])) {
                errors.push(prop + ' is not a valid uuid');
            }
        }
    }

    // image type
    if (validTypes.indexOf(manifest.type) == -1) {
        errors.push('image type must be one of "zvol" or "zone-dataset"');
    }

    // Zvol has extra required fields
    if (manifest.type === 'zvol') {
        for (i = 0; i < vmFields.length; i++) {
            prop = vmFields[i];
            _isPresent(prop);
        }
    }

    // Platform type
    if (manifest.platform && manifest.platform.type !== 'smartos') {
        errors.push('platform type must be "smartos"');
    }

    // Requirements
    if (manifest.requirements) {

        ramFields = ['min_ram', 'max_ram'];
        for (i = 0; i < ramFields.length; i++) {
            prop = ramFields[i];
            val = manifest.requirements[i];
            if (prop) {
                _isPositiveInt(prop, val);
            }
        }
    }

    return (errors.length === 0 ? true : errors);

};

var _dbFile = function (uuid) {
    if (!_isUuid(uuid)) {
        throw new Error('not a valid uuid [' + uuid + ']');
    }
    return DB_PATH + '/' + uuid + '.json';
};


var _exists = function (uuid, callback) {
    fs.exists(_dbFile(uuid), callback);
};

db.save = function (manifest, callback) {
    var contents;
    var filename = _dbFile(manifest.uuid);
    var valid = validateManifest(manifest);

    log.debug('saving %s %s', manifest.uuid, DB_PATH);
    if (valid != true) {
        callback(new Error('not a valid manifest: ' + valid.join('\n')));
        return;
    }

    contents = JSON.stringify(manifest, null, '  ');
    fs.writeFile(filename, contents, function (err) {
        callback(err);
        return;
    });
};

db.load = function (uuid, callback) {
    var filename = _dbFile(uuid);

    log.debug('loading from %s', uuid);

    fs.exists(filename, function (exists) {
        if (exists) {
            fs.readFile(filename, 'utf8', function (err, data) {
                var manifest;

                if (err) {
                    callback(err, null);
                } else {
                    manifest = JSON.parse(data);
                    callback(err, manifest);
                }
            });
        } else {
            callback(new Error('record does not exist'), null);
        }
    });
};

db.all = function (callback) {

    var onRecord = function (err, records) {
        var error;
        var i;
        var n = records.length;
        var results = [];
        var uuid;

        // XXX replace with async.forEach

        var cb_n = function (next) {
            return function () {
                --n;
                if (n === 0) {
                    next(error, results);
                }
            };
        };

        for (i = 0; i < records.length; i++) {
            uuid = records[i];
            db.load(uuid, function (e, manifest) {
                error = e;
                results.push(manifest);
                // cb_n() calls our callback when this is the last record
                cb_n(callback)();
            });
        }
    };

    db.list(onRecord);
};

db.list = function (callback) {
    log.debug('listing all manifests from db');
    fs.readdir(DB_PATH, function (err, files) {
        var ext;
        var file;
        var i;
        var results = [];

        if (err) {
            throw err;
        }

        for (i = 0; i < files.length; i++) {
            file = files[i];
            ext = path.extname(file);
            if (ext === '.json' && file !== 'imgcache.json') {
                results.push(path.basename(file, '.json'));
            }
        }

        log.debug('%o records loaded', results.length);
        return callback(err, results);
    });
};

db.destroy = function (uuid, callback) {
    var filename = _dbFile(uuid);

    _exists(uuid, function (exists) {
        if (exists) {
            fs.unlink(filename, function (err) {
                callback(err);
            });
        } else {
            callback(new Error('manifest with uuid' + uuid
                + ' does not exist'));
            return;
        }
    });
};

module.exports = {
    save: db.save,
    load: db.load,
    list: db.list,
    all: db.all,
    destroy: db.destroy,
    validateManifest: validateManifest
};
